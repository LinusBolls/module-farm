datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// accounts and sessions

model User {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  email                String               @unique
  username             String               @unique
  password             String
  avatarUrl            String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt
  Account              Account[]
  Session              Session[]
  ownedOrganizations   Organization[]       @relation("ownedBy")
  memberOrganizations  OrganizationMember[]
  ownedWorkflows       Workflow[]
  ownedWorkflowActions WorkflowAction[]
  files                File[]
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// organizations

model OrganizationPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key String @unique

  displayName          String
  OrganizationMember   OrganizationMember? @relation(fields: [organizationMemberId], references: [id])
  organizationMemberId String?             @db.ObjectId
}

model OrganizationMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  permissions OrganizationPermission[]

  @@unique([organizationId, userId])
}

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  displayName String

  owner   User   @relation("ownedBy", fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  members OrganizationMember[]

  iconUrl String?
}

// workflows

model WorkflowPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  displayName String
}

model Workflow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  emoji       String
  displayName String
  description String

  actions WorkflowAction[]
  nodes   WorkflowNode[]
  edges   WorkflowEdge[]

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @db.ObjectId
}

model WorkflowNode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  block   WorkflowBlock @relation(fields: [blockId], references: [id])
  blockId String

  posX Float
  posY Float

  incomingEdges WorkflowEdge[] @relation("targetNode")
  outgoingEdges WorkflowEdge[] @relation("sourceNode")
}

model WorkflowEdge {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  sourceNode   WorkflowNode? @relation("sourceNode", fields: [sourceNodeId], references: [id])
  sourceNodeId String?       @db.ObjectId

  targetNode   WorkflowNode? @relation("targetNode", fields: [targetNodeId], references: [id])
  targetNodeId String?       @db.ObjectId
}

model WorkflowBlock {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  service   ExternalService @relation(fields: [serviceId], references: [id])
  serviceId String          @db.ObjectId

  iconUrl     String?
  displayName String
  description String

  nodes WorkflowNode[]
}

model ExternalService {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  displayName String

  url String

  iconUrl String

  blocks WorkflowBlock[]
}

model WorkflowAction {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  actionType ActionType
  causedBy   User       @relation(fields: [causedById], references: [id])
  causedById String     @db.ObjectId
  createdAt  DateTime   @default(now())
  detail     Json

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @db.ObjectId

  @@index([actionType])
}

enum ActionType {
  CREATE_NODE
  MOVE_NODE
  DELETE_NODE
  CREATE_EDGE
  DELETE_EDGE
}

// file uploads

model File {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  displayName String
  fileName    String
  mimetype    String
  createdAt   DateTime  @default(now())
  assetRole   AssetRole @default(USER_AVATAR)
  uploader    User      @relation(fields: [uploaderId], references: [id])
  uploaderId  String
}

enum AssetRole {
  USER_AVATAR
  WORKFLOW_THUMBNAIL
  WORKFLOW_INPUT
}
